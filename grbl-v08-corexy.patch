diff -Naur grbl-master//config.h grbl-v08-corexy//config.h
--- grbl-master//config.h       2013-10-21 19:19:26.000000000 -0700
+++ grbl-v08-corexy//config.h   2013-11-07 03:01:57.000000000 -0800
@@ -171,6 +171,10 @@
 // successful values for certain setups have ranged from 10 to 20us.
 // #define STEP_PULSE_DELAY 10 // Step pulse delay in microseconds. Default disabled.

+// Enable CoreXY kinematics - Backport from Marlin v1
+// http://corexy.com/
+#define COREXY // Default disabled. Uncomment to enable.
+
 // ---------------------------------------------------------------------------------------

 // TODO: Install compile-time option to send numeric status codes rather than strings.
diff -Naur grbl-master//planner.c grbl-v08-corexy//planner.c
--- grbl-master//planner.c      2013-10-21 19:19:26.000000000 -0700
+++ grbl-v08-corexy//planner.c  2013-10-15 09:57:17.000000000 -0700
@@ -356,13 +356,30 @@

   // Compute direction bits for this block
   block->direction_bits = 0;
-  if (target[X_AXIS] < pl.position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
-  if (target[Y_AXIS] < pl.position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
+  #ifndef COREXY
+    if (target[X_AXIS] < pl.position[X_AXIS]) { block->direction_bits |= (1<<X_DIRECTION_BIT); }
+    if (target[Y_AXIS] < pl.position[Y_AXIS]) { block->direction_bits |= (1<<Y_DIRECTION_BIT); }
+  #else
+    if ((target[X_AXIS]-pl.position[X_AXIS]) + (target[Y_AXIS]-pl.position[Y_AXIS]) < 0) {
+      block->direction_bits |= (1<<X_DIRECTION_BIT);
+    }
+    if ((target[X_AXIS]-pl.position[X_AXIS]) - (target[Y_AXIS]-pl.position[Y_AXIS]) < 0) {
+      block->direction_bits |= (1<<Y_DIRECTION_BIT);
+    }
+  #endif
   if (target[Z_AXIS] < pl.position[Z_AXIS]) { block->direction_bits |= (1<<Z_DIRECTION_BIT); }

   // Number of steps for each axis
-  block->steps_x = labs(target[X_AXIS]-pl.position[X_AXIS]);
-  block->steps_y = labs(target[Y_AXIS]-pl.position[Y_AXIS]);
+  #ifndef COREXY
+    // default non-h-bot planning
+    block->steps_x = labs(target[X_AXIS]-pl.position[X_AXIS]);
+    block->steps_y = labs(target[Y_AXIS]-pl.position[Y_AXIS]);
+  #else
+    // corexy planning
+    // these equations follow the form of the dA and dB equations on http://www.corexy.com/theory.html
+    block->steps_x = labs((target[X_AXIS]-pl.position[X_AXIS]) + (target[Y_AXIS]-pl.position[Y_AXIS]));
+    block->steps_y = labs((target[X_AXIS]-pl.position[X_AXIS]) - (target[Y_AXIS]-pl.position[Y_AXIS]));
+  #endif
   block->steps_z = labs(target[Z_AXIS]-pl.position[Z_AXIS]);
   block->step_event_count = max(block->steps_x, max(block->steps_y, block->steps_z));

@@ -371,8 +388,13 @@

   // Compute path vector in terms of absolute step target and current positions
   float delta_mm[3];
-  delta_mm[X_AXIS] = (target[X_AXIS]-pl.position[X_AXIS])/settings.steps_per_mm[X_AXIS];
-  delta_mm[Y_AXIS] = (target[Y_AXIS]-pl.position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
+  #ifndef COREXY
+    delta_mm[X_AXIS] = (target[X_AXIS]-pl.position[X_AXIS])/settings.steps_per_mm[X_AXIS];
+    delta_mm[Y_AXIS] = (target[Y_AXIS]-pl.position[Y_AXIS])/settings.steps_per_mm[Y_AXIS];
+  #else
+    delta_mm[X_AXIS] = ((target[X_AXIS]-pl.position[X_AXIS]) + (target[Y_AXIS]-pl.position[Y_AXIS]))/settings.steps_per_mm[X_AXIS];
+    delta_mm[Y_AXIS] = ((target[X_AXIS]-pl.position[X_AXIS]) - (target[Y_AXIS]-pl.position[Y_AXIS]))/settings.steps_per_mm[Y_AXIS];
+  #endif
   delta_mm[Z_AXIS] = (target[Z_AXIS]-pl.position[Z_AXIS])/settings.steps_per_mm[Z_AXIS];
   block->millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] +
                             delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
--- grbl-master/report.c    2013-08-25 15:08:08.000000000 -0300
+++ grbl-v8-corexy/report.c 2013-11-09 16:33:12.038022288 -0200
@@ -311,7 +311,14 @@
   // Report machine position
   printPgmString(PSTR(",MPos:")); 
   for (i=0; i<= 2; i++) {
-    print_position[i] = current_position[i]/settings.steps_per_mm[i];
+    #ifndef COREXY
+      print_position[i] = current_position[i]/settings.steps_per_mm[i];
+    #else
+      // Convert A and B to X and Y
+      if (i==0) { print_position[i] = ((current_position[0]+current_position[1])/2)/settings.steps_per_mm[i]; }
+      else if (i==1) { print_position[i] = ((current_position[0]-current_position[1])/2)/settings.steps_per_mm[i]; }
+      else { print_position[i] = current_position[i]/settings.steps_per_mm[i]; }
+    #endif
     if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) { print_position[i] *= INCH_PER_MM; }
     printFloat(print_position[i]);
     printPgmString(PSTR(","));
